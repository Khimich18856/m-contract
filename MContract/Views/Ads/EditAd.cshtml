@model MContract.Models.AdsEditAdViewModel

@{
    ViewBag.Title = "Объявление №" + Model.Ad.Id + " - редактирование";
    Layout = "~/Views/Shared/_LayoutOld.cshtml";
}

@section Styles{
    <link href="@Url.Content("~/css/Ads/EditAd.css")?p=202006151" rel="stylesheet" type="text/css" />
    <link href="~/js/jquery-ui/jquery-ui.css?p=202006112" rel="stylesheet" type="text/css" />
}

<script src="~/js/jquery-ui/jquery-ui.min.js" type="text/javascript"></script>

<table class="adDetails">
    <tr>
        <td>
            @(Model.Ad.IsBuy ? "Покупатель:" : "Продавец:")
        </td>
        <td class="senderNameContainer">
            @(Model.Ad.Sender?.CompanyNameWithTypeOfOwnership), @(Model.Ad.Sender?.TownName)
        </td>
    </tr>
    <tr>
        <td>
            Город:
        </td>
        <td class="cityContainer">
            <input class="cityInput" type="text" autocomplete="off" />
        </td>
        <td class="tipsContainer">
            <span class="requiredFieldMarker">*</span>
            <div class="needContainer cityNeedContainer">
                <span>Поле "Город" обязательно для заполнения</span>
            </div>
            <div class="invalidContainer cityInvalidContainer">
                <span></span>
            </div>
            <div class="checkedContainer cityCheckedContainer">
                <img src="/ico/CheckmarkGreen.svg">
            </div>
        </td>
    </tr>
    @if (Model.Ad?.IsBuy == true)
    {
        <tr class="deliveryAddressRow isBuy">
            <td>
                Адрес поставки товара:
            </td>
            <td class="deliveryAddressContainer">
                <input type="text" value="@(Model.Ad?.DeliveryAddress ?? Model.PersonalAreaUser?.FactualAddress ?? Model.PersonalAreaUser?.Address ?? Model.PersonalAreaUser?.TownName)" />
            </td>
            <td class="tipsContainer">
                <span class="requiredFieldMarker">*</span>
                <div class="needContainer deliveryAddressNeedContainer">
                    <span>Поле "Адрес поставки товара" обязательно для заполнения</span>
                </div>
                <div class="invalidContainer deliveryAddressInvalidContainer">
                    <span></span>
                </div>
                <div class="checkedContainer deliveryAddressCheckedContainer">
                    <img src="/ico/CheckmarkGreen.svg">
                </div>
            </td>
        </tr>
    }
    <tr>
        <td>
            Условия поставки:
        </td>
        <td class="deliveryTypeContainer">
            <select class="deliveryType">
                <option name="deliveryType" value="0">Не выбрано</option>
                <option name="deliveryType" value="1">Доставка продавцом</option>
                <option name="deliveryType" value="2">Самовывоз покупателем</option>
            </select>
        </td>
        @*<td class="tipsContainer">
                <span class="requiredFieldMarker">*</span>
                <div class="needContainer deliveryTypeNeedContainer">
                    <span>Необходимо выбрать хотя бы один из вариантов</span>
                </div>
                <div class="invalidContainer deliveryTypeInvalidContainer">
                    <span></span>
                </div>
                <div class="checkedContainer deliveryTypeCheckedContainer">
                    <img src="/ico/CheckmarkGreen.svg">
                </div>
            </td>*@
    </tr>
    @if (Model.Ad?.IsBuy == false)
    {
        <tr class="deliveryAddressRow">
            <td>
                Адрес поставки товара:
            </td>
            <td class="deliveryAddressContainer">
                <input type="text" value="@(Model.PersonalAreaUser?.Address)" />
            </td>
            <td class="tipsContainer">
                <span class="requiredFieldMarker">*</span>
                <div class="needContainer deliveryAddressNeedContainer">
                    <span>Поле "Адрес поставки товара" обязательно для заполнения</span>
                </div>
                <div class="invalidContainer deliveryAddressInvalidContainer">
                    <span></span>
                </div>
                <div class="checkedContainer deliveryAddressCheckedContainer">
                    <img src="/ico/CheckmarkGreen.svg">
                </div>
            </td>
        </tr>
    }
    <tr>
        <td>
            Погрузка:
        </td>
        <td class="deliveryLoadTypeContainer">
            <select class="deliveryLoadType">
                <option name="deliveryLoadType" value="0">Не выбрано</option>
                <option name="deliveryLoadType" value="1">Силами продавца</option>
                <option name="deliveryLoadType" value="2">Силами покупателя</option>
            </select>
        </td>
        @*<td class="tipsContainer">
                <span class="requiredFieldMarker">*</span>
                <div class="needContainer deliveryLoadTypeNeedContainer">
                    <span>Необходимо выбрать хотя бы один из вариантов</span>
                </div>
                <div class="invalidContainer deliveryLoadTypeInvalidContainer">
                    <span></span>
                </div>
                <div class="checkedContainer deliveryLoadTypeCheckedContainer">
                    <img src="/ico/CheckmarkGreen.svg">
                </div>
            </td>*@
    </tr>
    <tr>
        <td>
            Способ доставки:
        </td>
        <td class="deliveryWayContainer">
            <select class="deliveryWay">
                <option name="deliveryWay" value="0">Не выбрано</option>
                <option name="deliveryWay" value="1">Авто</option>
                <option name="deliveryWay" value="2">Ж/Д</option>
            </select>
        </td>
        @*<td class="tipsContainer">
                <span class="requiredFieldMarker">*</span>
                <div class="needContainer deliveryWayNeedContainer">
                    <span>Необходимо выбрать хотя бы один из вариантов</span>
                </div>
                <div class="invalidContainer deliveryWayInvalidContainer">
                    <span></span>
                </div>
                <div class="checkedContainer deliveryWayCheckedContainer">
                    <img src="/ico/CheckmarkGreen.svg">
                </div>
            </td>*@
    </tr>
    <tr>
        <td>
            Цена:
        </td>
        <td class="ndsContainer">
            <select class="Nds">
                <option name="Nds" value="0">Не выбрано</option>
                <option name="Nds" value="1">C НДС</option>
                <option name="Nds" value="2">Без НДС</option>
            </select>
        </td>
        @*<td class="tipsContainer">
                <span class="requiredFieldMarker">*</span>
                <div class="needContainer NdsNeedContainer">
                    <span>Необходимо выбрать хотя бы один из вариантов</span>
                </div>
                <div class="invalidContainer NdsInvalidContainer">
                    <span></span>
                </div>
                <div class="checkedContainer NdsCheckedContainer">
                    <img src="/ico/CheckmarkGreen.svg">
                </div>
            </td>*@
    </tr>
    <tr>
        <td>
            Условия оплаты:
        </td>
        <td class="termsOfPaymentsContainer">
            <select class="termsOfPayments">
                <option name="termsOfPayments" value="0">Не выбрано</option>
                <option name="termsOfPayments" value="1">Отсрочка платежа</option>
                <option name="termsOfPayments" value="2">100% предоплата</option>
                <option name="termsOfPayments" value="3">Частичная предоплата</option>
                <option name="termsOfPayments" value="4">По факту поставки</option>
            </select>
        </td>
        @*<td class="tipsContainer">
                <span class="requiredFieldMarker">*</span>
                <div class="needContainer termsOfPaymentsNeedContainer">
                    <span>Необходимо выбрать один из вариантов</span>
                </div>
                <div class="invalidContainer termsOfPaymentsInvalidContainer">
                    <span></span>
                </div>
                <div class="checkedContainer termsOfPaymentsCheckedContainer">
                    <img src="/ico/CheckmarkGreen.svg">
                </div>
            </td>*@
    </tr>
    <tr class="defermentPeriodRow">
        <td>
            Максимальный срок оплаты:
        </td>
        <td class="defermentPeriodContainer">
            <input type="tel" value="@(Model.Ad?.DefermentPeriod)" /> дней
        </td>
        <td class="tipsContainer">
            <span class="requiredFieldMarker">*</span>
            <div class="needContainer defermentPeriodNeedContainer">
                <span>Поле "Максимальный срок оплаты" обязательно для заполнения</span>
            </div>
            <div class="invalidContainer defermentPeriodInvalidContainer">
                <span>Поле "Максимальный срок оплаты" должно содержать число</span>
            </div>
            <div class="checkedContainer defermentPeriodCheckedContainer">
                <img src="/ico/CheckmarkGreen.svg">
            </div>
        </td>
    </tr>
    <tr>
        <td>
            Подача предложений по части позиций:
        </td>
        <td class="partOffersAllowedContainer">
            <input type="checkbox" name="partOffersAllowed" id="partOffersAllowed" value="1" />
        </td>
        @*<td class="tipsContainer">
                <span class="requiredFieldMarker">*</span>
                <div class="needContainer partOffersAllowedNeedContainer">
                    <span></span>
                </div>
                <div class="invalidContainer partOffersAllowedInvalidContainer">
                    <span></span>
                </div>
                <div class="checkedContainer partOffersAllowedCheckedContainer">
                    <span></span>
                </div>
            </td>*@
    </tr>
</table>

<table class="productDetails">
    <tr>
        <td>
            №
        </td>
        <td style="display: none"></td>
        <td>
            Категория товара <span class="requiredFieldMarker">*</span>
        </td>
        <td>
            Точное наименование
        </td>
        <td>
            Вес (тн.) <span class="requiredFieldMarker">*</span>
        </td>
        <td>
            Валюта <span class="requiredFieldMarker">*</span>
        </td>
        <td style="position:relative">
            Цена за 1 тн.<br /><input type="checkbox" class="pricePerWeightToggle" style="position:absolute;top:0px;right:0px" @(Model.Ad.Products.Any(ad => ad.PricePerWeight != 0) ? "checked" : "") />
            @(Model.Ad?.IsBuy == true ? "максимальная" : "минимальная")
        </td>
        <td></td>
    </tr>
    <tr>
        <td class="productNumber">
            0
        </td>
        <td class="productId" style="display: none"></td>
        <td class="categoryContainer">
            <input type="text" placeholder="Категории" />
            <div class="optionsContainer">
                <div class="noMatches">
                    Нет результатов
                </div>
                @if (Model.ProductCategories.Any())
                {
                    foreach (var categoryLevel1 in Model.ProductCategories.Where(c => c.Level == 1))
                    {
                        <div class="categoryLevel1">
                            <button class="expandOptions expand">+</button>
                            <input type="radio" name="category0" value="@categoryLevel1.Id" />
                            <span>@categoryLevel1.Name</span>
                        </div>
                        var categoriesLevel2 = Model.ProductCategories.Where(c => c.ParentId == categoryLevel1.Id).ToList();
                        foreach (var categoryLevel2 in categoriesLevel2)
                        {
                            <div class="categoryLevel2">
                                <button class="expandOptions expand">+</button>
                                <input type="radio" name="category0" value="@categoryLevel2.Id" />
                                <span>@categoryLevel2.Name</span>
                            </div>
                            var categoriesLevel3 = Model.ProductCategories.Where(c => c.ParentId == categoryLevel2.Id).ToList();
                            foreach (var categoryLevel3 in categoriesLevel3)
                            {
                                <div class="categoryLevel3">
                                    <input type="radio" name="category0" value="@categoryLevel3.Id" />
                                    <span>@categoryLevel3.Name</span>
                                </div>
                            }

                        }
                    }
                }
            </div>
        </td>
        <td class="specificCategoryContainer">
            <input type="text" placeholder="Наименование" /><button class="removeSpecific">x</button>
            <button class="addSpecific">Указать</button>
        </td>
        <td class="weightContainer">
            <input type="tel" placeholder="1" class="weight" />
        </td>
        <td class="currencyContainer">
            <select class="currency0">
                <option name="currency0" value="@((int)MContract.Models.Enums.Currencies.Rouble)">Рубли</option>
                <option name="currency0" value="@((int)MContract.Models.Enums.Currencies.Dollar)">Доллары</option>
            </select>
        </td>
        <td class="pricePerWeightContainer">
            <input type="tel" placeholder="10000" class="pricePerWeight" disabled />
        </td>
        <td>
            <button class="removeProduct">x</button>
        </td>
    </tr>
    <tr class="tipsRow">
        <td></td>
        <td colspan="5" class="tipsContainer">
            <div class="needContainer categoryNeedContainer">
                <span>Поле "Категория" обязательно для заполнения</span>
            </div>
            <div class="invalidContainer categoryInvalidContainer">
                <span></span>
            </div>
            <div class="needContainer specificCategoryNeedContainer">
                <span></span>
            </div>
            <div class="invalidContainer specificCategoryInvalidContainer">
                <span>Необходимо указать или удалить точное наименование</span>
            </div>
            <div class="needContainer weightNeedContainer">
                <span>Поле "Вес" обязательно для заполнения</span>
            </div>
            <div class="invalidContainer weightInvalidContainer">
                <span></span>
            </div>
            <div class="needContainer currencyNeedContainer">
                <span>Поле "Валюта" обязательно для заполнения</span>
            </div>
            <div class="invalidContainer currencyInvalidContainer">
                <span></span>
            </div>
            <div class="needContainer pricePerWeightNeedContainer">
                <span></span>
            </div>
            <div class="invalidContainer pricePerWeightInvalidContainer">
                <span></span>
            </div>
        </td>
        <td></td>
    </tr>
</table>
<button class="addProduct">+</button>

<div class="adDescriptionContainer">
    Описание:<br />
    <textarea>@(Model.Ad?.Description)</textarea>
</div>

<div class="imageUploadContainer">
    <input type="file" name="imageSelect" id="imageSelect" accept="image/png, image/jpeg" multiple />
    <button class="uploadImages btn btn-primary">Загрузить фотографии</button>
    <span class="imageUploadingMessage">Фотографии загружаются на сервер...</span>
</div>

<div class="adPhotosContainer @(Model.Ad?.Photos.Any() == false ? "isEmpty" : "")">
    <div class="singleAdPhotoContainer cloneSource">
        <div class="adPhoto"></div>
        <img src="/ico/Checkmark.svg" class="adPhotoIsMain" />
        <img src="/ico/Home.svg" class="makeMainAdPhoto" />
        <img src="/ico/CircledX.svg" class="removeAdPhoto" />
    </div>
    @if (Model.Ad?.Photos.Any() == true)
    {
        var requiredDimension = 200;
        foreach (var photoId in Model.Ad.Photos.GroupBy(p => p.GroupId.ToString()).Select(g => g.FirstOrDefault().Id))
        {
            var bestFitPhoto = Model.Ad.GetBestFitPhotoFromPhotoId(photoId, requiredDimension);
            var originalPhoto = Model.Ad.GetOriginalPhotoFromPhotoId(photoId);
            <div class="singleAdPhotoContainer" data-url="@originalPhoto.Url">
                <div style="background: url(@bestFitPhoto.Url) 50% 50% no-repeat; background-size: 100% 100%;" class="adPhoto" id="@bestFitPhoto.Id"></div>
                <img src="/ico/Checkmark.svg" class="adPhotoIsMain @(bestFitPhoto.IsMain ? "true" : "")" />
                <img src="/ico/Home.svg" class="makeMainAdPhoto" />
                <img src="/ico/CircledX.svg" class="removeAdPhoto" />
            </div>
        }
    }
</div>


@if (Model.Ad?.AdStatus != MContract.Models.Enums.AdStatuses.Draft)
{
    <table class="finalAdDetails">
        <tr>
            <td>
                Участники не смогут видеть ценовые предложения друг друга:
            </td>
            <td class="offersVisibleToOtherUsersContainer">
                <input type="checkbox" name="offersVisibleToOtherUsers" id="offersVisibleToOtherUsers1" value="1" @(Model.Ad.OffersVisibleToOtherUsers ? "" : "checked") />
            </td>
            <td></td>
        </tr>
        <tr>
            <td>
                Объявление активно до:
            </td>
            <td class="activeUntilDateContainer">
                <input value="@(Model.Ad.ActiveToDate != null? Model.Ad.ActiveToDate.Value.ToString("dd.MM.yyyy") : "")" /> 23:59 МСК
            </td>
            <td class="tipsContainer">
                <span class="requiredFieldMarker">*</span>
                <div class="needContainer activePeriodNeedContainer">
                    <span>Поле "Объявление активно до" обязательно для заполнения</span>
                </div>
                <div class="invalidContainer activePeriodInvalidContainer">
                    <span>Дата должна соответствовать формату ДД.ММ.ГГГГ</span>
                </div>
                <div class="checkedContainer activePeriodCheckedContainer">
                    <img src="/ico/CheckmarkGreen.svg">
                </div>
            </td>
        </tr>
    </table>

    if (Model.Ad?.AvailableForAllUsers == false && Model.Ad?.AdStatus == MContract.Models.Enums.AdStatuses.Published)
    {
        var regularClientsId = Model.Ad.RegularClients.Select(u => u.Id).ToList();
        <link rel="stylesheet" href="~/js/bootstrap-select-1.13.14/dist/css/bootstrap-select.css">
        <script src="~/js/bootstrap-select-1.13.14/dist/js/bootstrap-select.js"></script>
        <div class="inviteUsersContainer">
            <select class="selectpicker inviteUsers" title="Пригласить участников" data-style="btn-primary" data-live-search="true" data-selected-text-format="static" multiple>
                @foreach (var user in Model.Ad.AllUsers)
                {
                    if (user.Id == Model.PersonalAreaUser?.Id || user.IsSystemNotifications)
                    {
                        continue;
                    }
                    <option value="@user.Id"
                            @(Model.Ad.InvitedUsersId.Any(id => id == user.Id) ? "selected disabled" : "")
                            @(regularClientsId.Any(id => id == user.Id) ? "class=regularClient" : "class=nonRegularClient")>
                        @user.CompanyNameWithTypeOfOwnership@(user.TownName != null ? ", " + user.TownName : "")
                    </option>
                }
            </select>
        </div>
    }
}

<button class="saveChanges btn btn-primary">Сохранить изменения</button>

<input class="isBuyHf" type="hidden" value="@((Model.Ad?.IsBuy == true).ToString().ToLower())" />
<input class="availableForAllUsersHf" type="hidden" value="@((Model.Ad?.AvailableForAllUsers == true).ToString().ToLower())" />

<script src="~/js/user/viewImage.js?p=202006112" type="text/javascript"></script>
<script src="~/js/jquery-ui/jquery-ui.js"></script>
<script type="text/javascript">
    jQuery(document).ready(function ($) {
        $(".inviteUsers .nonRegularClient").each(function () {
            if ($(this).filter("option").prop("selected") == false && !$(this).filter("a").closest("li").hasClass("selected")) {
                $(this).hide();
            }
        });
        $(".inviteUsersContainer").on("keyup", "input[type=search]", function () {
            if ($(this).val().length == 0) {
                $(".inviteUsers .nonRegularClient").each(function () {
                    if (($(this).is("option") && $(this).prop("selected") == false) || ($(this).is("a") && !$(this).hasClass("selected"))) {
                        $(this).hide();
                    }
                });
            } else {
                $(".inviteUsers .nonRegularClient").show();
            }
        });
        $(".activeUntilDateContainer input").datepicker({
            dateFormat: "dd.mm.yy",
            minDate: 0
        });
        $(".uploadImages").click(function () {
            $(this).siblings("#imageSelect").trigger("click");
        });
        $("#imageSelect").change(function () {
            //var input = document.getElementById("imageSelect");
            var input = $(this)[0];
            var files = input.files;
            if (window.FormData !== undefined) {
                var data = new FormData();
                for (var i = 0; i < files.length; i++) {
                    data.append("file" + i, files[i]);
                }
                data.append('adId', @Model.Ad.Id);
                data.append('userId', @Model.Ad.SenderId);
                var newAdPhotoContainer = $(".adPhotosContainer .cloneSource").clone();
                newAdPhotoContainer.removeClass("cloneSource");
                $(".imageUploadingMessage").show();
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("UploadPhoto", "Ads")',
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        $(".imageUploadingMessage").hide();
                        if (!result.includes("error")) {
                            result = result.slice(0, -1);
                            splitResult = result.split('|');
                            splitResult.forEach(r => {
                                var splitPhotoInformation = r.split(',');
                                var photoId = splitPhotoInformation[1];
                                var photoUrl = splitPhotoInformation[2];
                                newAdPhotoContainer.attr("data-url", photoUrl);
                                newAdPhotoContainer.find(".adPhoto").attr("id", photoId).attr("style", "background: url(" + photoUrl + ") 50% 50% no-repeat; background-size: 100% 100%;");
                                $(".adPhotosContainer").append(newAdPhotoContainer);
                                newAdPhotoContainer = $(".adPhotosContainer .cloneSource").clone();
                                newAdPhotoContainer.removeClass("cloneSource");
                            });
                            $(".adPhotosContainer").removeClass("isEmpty");
                            @*let parts = result.split(',');
                            let newFileId = parts[1];
                            let fileName = parts[2];
                            let attachedFileIds = $('#attachedFileIds').val();
                            if (attachedFileIds.length > 0)
                                attachedFileIds += ',';

                            attachedFileIds += newFileId;
                            $('#attachedFileIds').val(attachedFileIds);
                            $('#attachedFilesDiv').show();
                            $('#attachedFilesDiv').append('<p><span>' + fileName + '</span></p>');*@

                        }
                        else
                            alert(result);
                    },
                    error: function (xhr, status, p3) {
                        $('#sendingSpan').hide();
                        alert("Error! " + xhr.responseText);
                    }
                });
            } else {
                alert("Браузер не поддерживает загрузку файлов HTML5! Установите современный браузер.");
            }
            $(this).val(null);
        });
        function removeAdPhotoCallback(obj) {
            obj.remove();
            if ($(".adPhotosContainer").children().length == 1) {
                $(".adPhotosContainer").addClass("isEmpty");
            }
        }
        $(".adPhotosContainer").on("click", ".removeAdPhoto", function () {
            var photoId = $(this).siblings(".adPhoto").attr("id");
            if (photoId != null) {
                var singleAdPhotoContainer = $(this).closest(".singleAdPhotoContainer");
                $.post("@Url.Action("DeletePhoto", "Ads")", { photoId: photoId }, removeAdPhotoCallback(singleAdPhotoContainer));
            }
        });
        function makeMainAdPhotoCallback(obj) {
            obj.siblings("div").not(".cloneSource").each(function () {
                $(this).find(".adPhotoIsMain").removeClass("true");
            });
            var photoToMoveContainer = obj.siblings("div").not(".cloneSource").eq(0);
            var containerIsNotMoved = [];
            photoToMoveContainer.siblings("div").not(".cloneSource").each(function () {
                if ($(this).find(".adPhoto").attr("id") > photoToMoveContainer.find(".adPhoto").attr("id")) {
                    photoToMoveContainer.insertBefore(this);
                    containerIsNotMoved.push(false);
                    return false;
                }
                containerIsNotMoved.push(true);
            });
            if (containerIsNotMoved.every(Boolean)) {
                photoToMoveContainer.appendTo(obj.closest(".adPhotosContainer"));
            }
            obj.find(".adPhotoIsMain").addClass("true");
            obj.prependTo(obj.closest(".adPhotosContainer"));
        }
        $(".adPhotosContainer").on("click", ".makeMainAdPhoto", function () {
            var photoId = $(this).siblings(".adPhoto").attr("id");
            if (photoId != null) {
                var singleAdPhotoContainer = $(this).closest(".singleAdPhotoContainer");
                $.post("@Url.Action("MakePhotoMain", "Ads")", { photoId: photoId }, makeMainAdPhotoCallback(singleAdPhotoContainer));
            }
        });
        var cityId = @Model.Ad.CityId;
        $(".adDetails .cityContainer .optionsContainer").find("input[value='" + cityId + "']").prop("checked", true);
        $(".adDetails .cityContainer .optionsContainer").find("input[value='" + cityId + "']").trigger("change");
        checkCity($(".adDetails .cityContainer"));
        $(".adDetails .deliveryTypeContainer option[value='" + @Convert.ToInt32(Model.Ad.DeliveryType) + "']").prop("selected", true);
        $(".adDetails .deliveryLoadTypeContainer option[value='" + @Convert.ToInt32(Model.Ad.DeliveryLoadType) + "']").prop("selected", true);
        $(".adDetails .deliveryWayContainer option[value='" + @Convert.ToInt32(Model.Ad.DeliveryWay) + "']").prop("selected", true);
        $(".adDetails .ndsContainer option[value='" + @Convert.ToInt32(Model.Ad.Nds) + "']").prop("selected", true);
        $(".adDetails .termsOfPaymentsContainer option[value='" + @Convert.ToInt32(Model.Ad.TermsOfPayments) + "']").prop("selected", true);
        $(".termsOfPaymentsContainer select").on("change", function () {
            if ($(".isBuyHf").val() == "true") {
                if ($(this).find("option:selected").val() == 1) {
                    $(this).closest("tr").siblings(".defermentPeriodRow").show();
                } else {
                    $(this).closest("tr").siblings(".defermentPeriodRow").hide();
                }
            }
        });
        $(".termsOfPaymentsContainer select").trigger("change");
        $(".adDetails .partOffersAllowedContainer").find("input[value=@Convert.ToInt32(Model.Ad.PartOffersAllowed)]").prop("checked", true);

        /*$(".adDetails .deliveryTypeContainer option").click(function () {
            event.preventDefault();
            if ($(this).prop("selected")) {
                adDeliveryTypeId[adDeliveryTypeId.indexOf($(this).val())].pop();
                $(this).prop("selected", false);
            } else {
                adDeliveryTypeId.push($(this).val());
                $(this).prop("selected", true);
            }
            adDeliveryTypeId.forEach(function () {
                if (adDeliveryTypeId.indexOf($(this).val()) > -1) {
                    $(this).prop("selected", true);
                } else {
                    $(this).prop("selected", false);
                }
            });
        });*/


        /*$(".adDetails .termsOfPaymentsContainer input").click(function () {
            $(this).closest(".termsOfPaymentsContainer").find(".optionsContainer").css("display", "initial");
        });
        $(".adDetails .termsOfPaymentsContainer input").mouseleave(function () {
            $(this).closest(".termsOfPaymentsContainer").find(".optionsContainer").css("display", "");
            $(this).closest(".termsOfPaymentsContainer").children("input").val("");
        });

        $(".adDetails .termsOfPaymentsContainer .optionsContainer div").click(function () {
            $(this).find("input").prop("checked", true);
            $(this).find("input").trigger("change");
            var text = $(this).find("span").html();
            $(this).closest(".termsOfPaymentsContainer").children("input").attr("placeholder", text);
        });

        $(".adDetails .termsOfPaymentsContainer .optionsContainer input").change(function () {
            $(this).closest("div").css("background-color", "whitesmoke");
            $(this).closest("div").siblings("div").css("background-color", "");
        });*/

        var productRowId = 0;
        $(".addProduct").on("click", function () {
            var productNumber = parseInt($.trim($(".productNumber").last().html())) + 1;
            productRowId++;
            var row = $(".productDetails tr").eq(1).add($(".productDetails tr").eq(2));
            $(".productDetails").append(row.clone());
            row = $(".productNumber").last().closest("tr");
            row.css("display", "");
            row.find(".categoryContainer .optionsContainer input").attr("name", "category" + productRowId);
            row.find("option").prop("selected", false);
            row.find("input:radio").prop("checked", false);
            row.find("input:not(:radio)").val("");
            row.find(".categoryContainer > input").attr("placeholder", "Категории");
            row.find(".productNumber").html(productNumber);
            row.find(".currencyContainer select").attr("class", "currency" + productRowId)
            row.find(".currencyContainer option").each(function () {
                $(this).attr("name", "currency" + productRowId);
            });
            if ($(".productDetails tr").length == 5) {
                $(".productDetails .removeProduct").css("display", "");
            } else {
                $(".productDetails .removeProduct").css("display", "initial");
            }
        });

        $(".productDetails").on("click", ".categoryContainer", function () {
            $(this).find(".optionsContainer").css("display", "initial");
            $(this).closest("tr").siblings().find(".optionsContainer").not(this).css("display", "");
        });

        $("body").on("click", function (event) {
            if ($(event.target).closest(".categoryContainer").length == 0) {
                $(".productDetails .categoryContainer > input").val("");
                $(".productDetails .categoryContainer .optionsContainer").css("display", "");
            }
        });

        $(".productDetails").on("keyup", ".categoryContainer > input", function () {
            var searchValue = $(this).val().toLowerCase();
            if (searchValue.length > 0) {
                $(this).siblings(".optionsContainer").find(".noMatches").css("display", "none");
                var matches = 0;
                $(this).siblings(".optionsContainer").children("div:not(.noMatches)").each(function () {
                    if ($(this).find("span").html().toLowerCase().indexOf(searchValue) >= 0) {
                        matches++;
                        $(this).find("img").css("margin-left", "0");
                        $(this).find("button").css("display", "none");
                        $(this).css("display", "");
                    } else {
                        $(this).find("img").css("margin-left", "");
                        $(this).css("display", "none");
                    }
                });
                if (matches == 0) {
                    $(this).siblings(".optionsContainer").find(".noMatches").css("display", "");
                }
            } else {
                $(this).siblings(".optionsContainer").find(".noMatches").css("display", "none");
                $(this).siblings(".optionsContainer").children("div:not(.noMatches)").each(function () {
                    if ($(this).hasClass("categoryLevel1")) {
                        $(this).css("display", "");
                    } else {
                        $(this).css("display", "none");
                    }
                    $(this).find("img").css("margin-left", "");
                    $(this).find("button").css("display", "");
                });
            }
        });

        $(".productDetails").on("click", ".categoryContainer .optionsContainer div:not(.noMatches)", function (event) {
            if (!$(event.target).closest("button").length) {
                $(this).find("input").prop("checked", true);
                $(this).find("input").trigger("change");
                var text = $(this).children("span").html();
                $(this).closest(".categoryContainer").children("input").attr("placeholder", text);
                $(this).closest(".categoryContainer").children("input").trigger("blur");
            }
        });

        $(".productDetails").on("change", ".categoryContainer .optionsContainer input", function () {
            //$(this).closest("div").css("background-color", "whitesmoke");
            $(this).closest("div").css("background-color", "ghostwhite");
            $(this).closest("div").siblings("div").css("background-color", "");
        });

        $(".productDetails").on("click", ".categoryContainer .optionsContainer .expandOptions", function () {
            var currentLevel;
            if ($(this).closest("div").hasClass("categoryLevel1")) {
                currentLevel = 1;
            } else if ($(this).closest("div").hasClass("categoryLevel2")) {
                currentLevel = 2;
            } else {
                currentLevel = 3;
            }
            if ($(this).hasClass("expand")) {
                $(this).removeClass("expand").addClass("contract");
                $(this).html("-");
                $(this).closest("div").nextUntil("div[class*='" + currentLevel + "'], div[class*='" + (currentLevel - 1) + "']").each(function () {
                    if ($(this).is("div[class*=" + (currentLevel + 1) + "]")) {
                        $(this).css("display", "flex");
                    }
                });
            } else if ($(this).hasClass("contract")) {
                $(this).removeClass("contract").addClass("expand");
                $(this).html("+");
                $(this).closest("div").nextUntil("div[class*='" + currentLevel + "'], div[class*='" + (currentLevel - 1) + "']").each(function () {
                    $(this).css("display", "");
                    $(this).find("button").attr("class", "expand");
                    $(this).find("button").html("+");
                });
            }
        });

        $(".productDetails").on("change", ".pricePerWeightToggle", function () {
            if ($(this).is(":checked")) {
                $(".pricePerWeightContainer input").prop("disabled", false);
            } else {
                $(".pricePerWeightContainer input").val("");
                $(".pricePerWeightContainer input").prop("disabled", true);
            }
        })

        $(".productDetails .pricePerWeightToggle").trigger("change");

        $(".pricePerWeightContainer input").each(function () {
            if ($(this).val()) {
                $(".productDetails .pricePerWeightToggle").prop("checked", true).trigger("change");
                return false;
            }
        })

        $(".productDetails").on("click", ".removeProduct", function () {
            $(this).parents("tr").add($(this).parents("tr").next("tr")).remove();
            for (let i = 2; i < $(".productDetails tr").length; i++) {
                $(".productDetails tr").eq(i).find(".productNumber").html((i - 1) / 2);
            }
            if ($(".productDetails tr").length == 5) {
                $(".productDetails .removeProduct").css("display", "");
            } else {
                $(".productDetails .removeProduct").css("display", "initial");
            }
        });

        $(".productDetails").on("click", ".addSpecific", function () {
            $(this).css("display", "none");
            $(this).siblings("input").css("display", "initial");
            $(this).siblings(".removeSpecific").css("display", "initial");
        });
        $(".productDetails").on("click", ".removeSpecific", function () {
            $(this).css("display", "");
            $(this).siblings("input").css("display", "");
            $(this).siblings(".addSpecific").css("display", "");
            $(this).closest(".specificCategoryContainer").find("input").trigger("blur");
        });

        var products = @Html.Raw(Json.Encode(Model.Ad.Products));
        products.forEach(function (product) {
            $(".addProduct").trigger("click");
            var row = $(".productNumber").last().closest("tr");
            $(row).find(".productId").html(product.Id);
            $(row).find(".categoryContainer .optionsContainer input[value=" + product.ProductCategoryId + "]").prop("checked", true).closest("div").trigger("click");
            if (product.Name) {
                $(row).find(".specificCategoryContainer input").val(product.Name).show();
                $(row).find(".removeSpecific").show();
                $(row).find(".addSpecific").hide();
            }
            $(row).find(".weightContainer input").val(product.Weight);
            $(row).find(".currencyContainer option[value=" + product.Currency + "]").prop("selected", true);
            if (product.PricePerWeight) {
                $(row).find(".pricePerWeightContainer input").val(product.PricePerWeight);
            }
        });
        $(".productDetails").trigger("click");

        prepareImageViewElements();
        $(".adPhotosContainer").on("click", ".singleAdPhotoContainer", function (event) {
            if ($(event.target).closest(".isPhotoMain, .makeMainAdPhoto, .removeAdPhoto").length == 0) {
                showImageView($(this));
            }
        });

        function checkCity(obj) {
            var tipsContainer = $(obj).closest("td").siblings(".tipsContainer");
            if ($(obj).closest("td").find(".selectedOptionsContainer .selectedOption").length == 0) {
                $(tipsContainer).children(".needContainer").css("display", "block");
                $(tipsContainer).children().not(".needContainer").css("display", "");
                return false;
            } else {
                $(tipsContainer).children(".checkedContainer").css("display", "block");
                $(tipsContainer).children().not(".checkedContainer").css("display", "");
                return true;
            }
        };

        /*function checkDeliveryType(obj) {
            var tipsContainer = $(obj).closest("td").siblings(".tipsContainer");
            if ($(obj).find("input:checked").length == 0) {
                $(tipsContainer).children(".needContainer").css("display", "block");
                $(tipsContainer).children().not(".needContainer").css("display", "");
                return false;
            } else {
                $(tipsContainer).children(".checkedContainer").css("display", "block");
                $(tipsContainer).children().not(".checkedContainer").css("display", "");
                return true;
            }
        }

        function checkDeliveryLoadType(obj) {
            var tipsContainer = $(obj).closest("td").siblings(".tipsContainer");
            if ($(obj).find("input:checked").length == 0) {
                $(tipsContainer).children(".needContainer").css("display", "block");
                $(tipsContainer).children().not(".needContainer").css("display", "");
                return false;
            } else {
                $(tipsContainer).children(".checkedContainer").css("display", "block");
                $(tipsContainer).children().not(".checkedContainer").css("display", "");
                return true;
            }
        }

        function checkDeliveryWay(obj) {
            var tipsContainer = $(obj).closest("td").siblings(".tipsContainer");
            if ($(obj).find("input:checked").length == 0) {
                $(tipsContainer).children(".needContainer").css("display", "block");
                $(tipsContainer).children().not(".needContainer").css("display", "");
                return false;
            } else {
                $(tipsContainer).children(".checkedContainer").css("display", "block");
                $(tipsContainer).children().not(".checkedContainer").css("display", "");
                return true;
            }
        }

        function checkNds(obj) {
            var tipsContainer = $(obj).closest("td").siblings(".tipsContainer");
            if ($(obj).find("input:checked").length == 0) {
                $(tipsContainer).children(".needContainer").css("display", "block");
                $(tipsContainer).children().not(".needContainer").css("display", "");
                return false;
            } else {
                $(tipsContainer).children(".checkedContainer").css("display", "block");
                $(tipsContainer).children().not(".checkedContainer").css("display", "");
                return true;
            }
        }

        function checkTermsOfPayments(obj) {
            var tipsContainer = $(obj).closest("td").siblings(".tipsContainer");
            if ($(obj).find("option:selected").length == 0) {
                $(tipsContainer).children(".needContainer").css("display", "block");
                $(tipsContainer).children().not(".needContainer").css("display", "");
                return false;
            } else {
                $(tipsContainer).children(".checkedContainer").css("display", "block");
                $(tipsContainer).children().not(".checkedContainer").css("display", "");
                return true;
            }
        }*/

        function checkDeliveryAddress(obj) {
            if ($(obj).find("input").val() != "") {
                $(obj).siblings(".tipsContainer").find(".checkedContainer").siblings("div").hide();
                $(obj).siblings(".tipsContainer").find(".checkedContainer").show();
                return true;
            } else {
                $(obj).siblings(".tipsContainer").find(".needContainer").siblings("div").hide();
                $(obj).siblings(".tipsContainer").find(".needContainer").show();
                return false;
            }
        }

        function checkDefermentPeriod(obj) {
            if ($(obj).find("input").val().length == 0) {
                $(obj).siblings(".tipsContainer").find(".needContainer").siblings("div").hide();
                $(obj).siblings(".tipsContainer").find(".needContainer").show();
                return false;
            } else if (!$.isNumeric($(obj).find("input").val())) {
                $(obj).siblings(".tipsContainer").find(".invalidContainer").siblings("div").hide();
                $(obj).siblings(".tipsContainer").find(".invalidContainer").show();
                return false;
            } else {
                $(obj).siblings(".tipsContainer").find(".checkedContainer").siblings("div").hide();
                $(obj).siblings(".tipsContainer").find(".checkedContainer").show();
                return true;
            }
        }

        function checkCategory(obj) {
            var tipsContainer = $(obj).closest("tr").next(".tipsRow").find(".tipsContainer");
            if ($(obj).find(".optionsContainer input:checked").length == 0) {
                $(tipsContainer).closest("tr").show();
                $(tipsContainer).find(".categoryNeedContainer").show();
                return false;
            } else {
                $(tipsContainer).find(".categoryNeedContainer").hide();
                if ($(tipsContainer).children(":visible").length == 0) {
                    $(tipsContainer).closest("tr").hide();
                }
                return true;
            }
        }

        function checkSpecificCategory(obj) {
            var tipsContainer = $(obj).closest("tr").next(".tipsRow").find(".tipsContainer");
            if (($(obj).find(".addSpecific").css("display") == "none") && ($(obj).children("input").val().length == 0)) {
                $(tipsContainer).closest("tr").show();
                $(tipsContainer).find(".specificCategoryInvalidContainer").show();
                return false;
            } else {
                $(tipsContainer).find(".specificCategoryInvalidContainer").hide();
                if ($(tipsContainer).children(":visible").length == 0) {
                    $(tipsContainer).closest("tr").hide();
                }
                return true;
            }
        }

        function checkWeight(obj) {
            var tipsContainer = $(obj).closest("tr").next(".tipsRow").find(".tipsContainer");
            if ($(obj).children("input").val().length == 0) {
                $(tipsContainer).closest("tr").show();
                $(tipsContainer).find(".weightNeedContainer").show();
                return false;
            } else {
                $(tipsContainer).find(".weightNeedContainer").hide();
                if ($(tipsContainer).children(":visible").length == 0) {
                    $(tipsContainer).closest("tr").hide();
                }
                return true;
            }
        }

        function checkActiveUntilDate(obj) {
            var tipsContainer = $(obj).closest("td").siblings(".tipsContainer");
            if ($(obj).find("input").val().length == 0) {
                $(tipsContainer).children(".needContainer").show().siblings("div").hide();
                return false;
            } else if (!$(obj).find("input").val().match("[0-9]{2}\.[0-9]{2}\.[0-9]{4}")) {
                $(tipsContainer).children(".invalidContainer").show().siblings("div").hide();
                return false;
            } else {
                $(tipsContainer).children(".checkedContainer").show().siblings("div").hide();
                return true;
            }
        }

        function checkInvitedUsers(obj) {
            if ($(obj).find("option:selected").length == 0) {
                return false;
            } else {
                return true;
            }
        }

        /*function checkCurrency(obj) {
            var tipsContainer = $(obj).closest("tr").next(".tipsRow").find(".tipsContainer");
            if ($(obj).children("input:checked").length == 0) {
                $(tipsContainer).closest("tr").show();
                $(tipsContainer).children(".needCurrencyContainer").show();
                return false;
            } else {
                $(tipsContainer).closest("tr").hide();
                $(tipsContainer).children(".needCurrencyContainer").hide();
                return true;
            }
        }*/

        $("body").on("blur", ".adDetails #city", function () {
            checkCity($(this));
        });

        /*$("body").on("change", ".adDetails .deliveryTypeContainer input", function () {
            checkDeliveryType($(this).closest(".deliveryTypeContainer"));
        });

        $("body").on("change", ".adDetails .deliveryLoadTypeContainer input", function () {
            checkDeliveryLoadType($(this).closest(".deliveryLoadTypeContainer"));
        });

        $("body").on("change", ".adDetails .deliveryWayContainer input", function () {
            checkDeliveryWay($(this).closest(".deliveryWayContainer"));
        });

        $("body").on("change", ".adDetails .NdsContainer input", function () {
            checkNds($(this).closest(".NdsContainer"));
        });

        $("body").on("change", ".adDetails .termsOfPaymentsContainer input", function () {
            checkTermsOfPayments($(this).closest(".termsOfPaymentsContainer"));
        });*/

        $("body").on("blur", ".productDetails .categoryContainer > input", function () {
            checkCategory($(this).closest(".categoryContainer"));
        });

        $("body").on("blur", ".productDetails .specificCategoryContainer input", function () {
            checkSpecificCategory($(this).closest(".specificCategoryContainer"));
        });

        $("body").on("blur", ".productDetails .weightContainer input", function () {
            checkWeight($(this).closest(".weightContainer"));
        });

        $("body").on("change", ".adDetails .currencyContainer input", function () {
            checkCurrency($(this).closest(".currencyContainer"));
        });

        $(".saveChanges").click(function () {
            if (@((Model.PersonalAreaUser?.Id != Model.Ad.SenderId).ToString().ToLower())) {
                alert("Невозможно отредактировать объявление, отправленное другим пользователем");
                return false;
            } else if (@((Model.Ad.AdStatus == MContract.Models.Enums.AdStatuses.Finished).ToString().ToLower())) {
                alert("Невозможно отредактировать завершенное объявление");
                return false;
            } else if (@(Model.Ad.Offers.Any(o => o.ContractStatus == MContract.Models.Enums.ContractStatuses.Sent).ToString().ToLower())) {
                alert("Невозможно отредактировать объявление с отправленным контрактом");
                return false;
            }
            var inputsValidated = [];
            if ($(".isBuyHf").val() == "false") {
                inputsValidated.push(checkCity($(".adDetails .cityContainer")));
            }
            if ($(".adDetails .deliveryAddressRow").is(":visible")) {
                inputsValidated.push(checkDeliveryAddress($(".adDetails .deliveryAddressContainer")));
            }
            if ($(".adDetails .defermentPeriodRow").is(":visible")) {
                inputsValidated.push(checkDefermentPeriod($(".adDetails .defermentPeriodContainer")));
            }
            /*inputsValidated.push(checkDeliveryType($(".adDetails .deliveryTypeContainer")));
            inputsValidated.push(checkDeliveryLoadType($(".adDetails .deliveryLoadTypeContainer")));
            inputsValidated.push(checkDeliveryWay($(".adDetails .deliveryWayContainer")));
            inputsValidated.push(checkNds($(".adDetails .NdsContainer")));*/
            //inputsValidated.push(checkTermsOfPayments($(".adDetails .termsOfPaymentsContainer")));
            $(".productDetails .productNumber").not(":eq(0)").each(function () {
                var row = $(this).closest("tr");
                inputsValidated.push(checkCategory($(row).find(".categoryContainer")));
                inputsValidated.push(checkSpecificCategory($(row).find(".specificCategoryContainer")));
                inputsValidated.push(checkWeight($(row).find(".weightContainer")));
            });
            if ($(".inviteUsersContainer").length != 0) {
                /*if (checkInvitedUsers($(".inviteUsersContainer .inviteRegularClients select"))) {
                    inputsValidated.push(true);
                } else if (checkInvitedUsers($(".inviteUsersContainer .inviteUsers select"))) {
                    inputsValidated.push(true);
                } else {
                    inputsValidated.push(false);
					alert("Для закрытого типа объявления нужно выбрать участников");
                }*/
                if (checkInvitedUsers($(".inviteUsersContainer select"))) {
                    inputsValidated.push(true);
                } else {
                    inputsValidated.push(false);
                    alert("Для закрытого типа объявления нужно выбрать участников");
                }
            }
            if ($(".activeUntilDateContainer").length != 0) {
                inputsValidated.push(checkActiveUntilDate($(".activeUntilDateContainer")));
            }
            if (inputsValidated.every(Boolean)) {
                var adSenderId = parseInt(@Model.Ad.SenderId);
                /*var adActiveToDate = new Date($.now());
                adActiveToDate.setDate(adActiveToDate.getDate() + parseInt($(".activePeriod input:checked").val()));
                var adActivePeriod = parseInt($(".activePeriod input:checked").val());*/
                var adDescription = String($(".adDescriptionContainer textarea").val());
                var adCityId = parseInt($(".cityContainer .optionsContainer div:not('.noMatches') input:checked").val());
                /*$(".deliveryTypeContainer option:selected").each(function () {
                    adDeliveryTypeId.push(parseInt($(this).val()));
                });
                $(".deliveryLoadTypeContainer option:selected").each(function () {
                    adDeliveryLoadTypeId.push(parseInt($(this).val()));
                });
                $(".deliveryWayContainer option:selected").each(function () {
                    adDeliveryWayId.push(parseInt($(this).val()));
                });
                $(".NdsContainer option:not(:first)").each(function () {
                    if ($(this).is(":selected")) {
                        adNds.push(Boolean(1));
                    } else {
                        adNds.push(Boolean(0));
                    }
                });*/
                var adId = parseInt(@Model.Ad.Id);
                var adDeliveryTypeId = parseInt($(".deliveryTypeContainer option:selected").val());
                var adDeliveryAddress = $(".deliveryAddressContainer input").val();
                var adDeliveryLoadTypeId = parseInt($(".deliveryLoadTypeContainer option:selected").val());
                var adDeliveryWayId = parseInt($(".deliveryWayContainer option:selected").val());
                var adNds = parseInt($(".ndsContainer option:selected").val());
                var adTermsOfPaymentsId = parseInt($(".termsOfPaymentsContainer option:selected").val());
                var adDefermentPeriod = parseInt($(".defermentPeriodContainer input").val());
                var adPartOffersAllowed = Boolean(Number($(".partOffersAllowedContainer input:checked").length));
                var adOffersVisibleToOtherUsers = !Boolean(Number($(".offersVisibleToOtherUsersContainer input:checked").length));
                var adActiveUntilDate = $(".activeUntilDateContainer input").val();
                var adIsBuy = Boolean(@Model.Ad.IsBuy.ToString().ToLower());
                var adAvailableForAllUsers = Boolean(@Model.Ad.AvailableForAllUsers.ToString().ToLower());
                var adStatusId = parseInt(@((int)Model.Ad.AdStatus));
                var adInvitedUsersId = [];
                if (!adAvailableForAllUsers) {
                    $(".inviteUsersContainer select option:selected").each(function () {
                        adInvitedUsersId.push($(this).val());
                    });
                }
                var numOfProducts = $(".productDetails .productNumber").length - 1;
                class AdProduct {
                    constructor(AdId, ProductCategoryId, Name, Weight, PricePerWeight, Currency) {
                        this.AdId = AdId
                        this.ProductCategoryId = ProductCategoryId;
                        this.Name = Name;
                        this.Weight = Weight;
                        this.PricePerWeight = PricePerWeight;
                        this.Currency = Currency;
                    }
                }
                var adProducts = [];
                for (let i = 0; i < numOfProducts; i++) {
                    var row = $(".productDetails tr").eq(2 * i + 3); // 2 * i - пропустить строки с ошибками, +3 - пропустить заголовок и строку для clone
                    var adId = @Model.Ad.Id;
                    var productCategoryId = $(row).find(".categoryContainer .optionsContainer input:checked").val();
                    var productName = $(row).find(".specificCategoryContainer > input").val();
                    var productWeight = $(row).find(".weightContainer input").val().replace(".", ",");
                    var productPricePerWeight = $(row).find(".pricePerWeightContainer input").val().replace(".", ",");
                    var productCurrency = $(row).find(".currencyContainer option:selected").val();
                    adProducts[i] = new AdProduct(adId, productCategoryId, productName, productWeight, productPricePerWeight, productCurrency);
                    if ($(row).find(".productId").length != 0) {
                        adProducts[i].Id = $(row).find(".productId").html();
                    }
                }
                $.post("@ViewBag.L.SiteUrlClear/Ads/EditAd", {
                    Id: adId,
                    SenderId: adSenderId,
                    //ActivePeriod: adActivePeriod,
                    Description: adDescription,
                    CityId: adCityId,
                    DeliveryType: adDeliveryTypeId,
                    DeliveryAddress: adDeliveryAddress,
                    DeliveryLoadType: adDeliveryLoadTypeId,
                    DeliveryWay: adDeliveryWayId,
                    TermsOfPayments: adTermsOfPaymentsId,
                    DefermentPeriod: adDefermentPeriod,
                    Nds: adNds,
                    PartOffersAllowed: adPartOffersAllowed,
                    IsBuy: adIsBuy,
                    AvailableForAllUsers: adAvailableForAllUsers,
                    OffersVisibleToOtherUsers: adOffersVisibleToOtherUsers,
                    ActiveToDate: adActiveUntilDate,
                    AdStatus: adStatusId,
                    Products: adProducts,
                    InvitedUsersId: adInvitedUsersId
                }).done(function (url) {
                    location.href = url;
                });
            } else {
                return false;
            }
        });
    });
</script>